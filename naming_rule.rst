命名規則
========

参考元
------

C言語における命名規則のポイントと実例 http://www.c-lang.org/detail/naming_conventions.html

命名法
------

アッパーキャメルケース(パスカル記法)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 全ての単語の先頭を大文字で記述する。
| 全て大文字で記述するような語も先頭1文字のみ大文字とする。(例 : Id)

ローワーキャメルケース(キャメル記法)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 先頭の単語を除いた全ての単語の先頭を大文字で記述する。
| 先頭の単語以外は、全て大文字で記述するような語も先頭1文字のみ大文字とする。(例 : id)

スネークケース
~~~~~~~~~~~~~~
  
単語の区切りにアンダースコア ``_`` を使用する。

ハンガリアン記法(非推奨)
~~~~~~~~~~~~~~~~~~~~~~~~

識別子を接頭辞や接尾辞として付加する記法

アプリケーションハンガリアン
""""""""""""""""""""""""""""

その意味や使用目的から接頭文字や接尾文字を決定する方式

システムハンガリアン
""""""""""""""""""""

データ型から接頭文字や接尾文字を決定する方式

例
~~

==================================== =============================================
命名法                               例
==================================== =============================================
アッパーキャメルケース(パスカル記法) UserId
ローワーキャメルケース(キャメル記法) userId
スネークケース                       user_id , USER_ID
アプリケーションハンガリアン         plUserId (Plaintext:平文の意味を付加する)
システムハンガリアン                 ulUserId (unsigned longを表わす)
==================================== =============================================

命名法の選択
------------

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - 命名する対象
     - 分類
     - 使用する命名法
   * - ディレクトリ
     -
     - 小文字スネークケース
   * - ソース・ヘッダファイル
     -
     - | アッパーキャメルケース
       | モジュール名と同じにすること
   * - 関数
     - グローバル関数
     - アッパーキャメルケース [1]_
   * -
     - ローカル関数
     - アッパーキャメルケース
   * - 変数
     - グローバル変数
     - ローワーキャメルケース [1]_
   * -
     - ローカル変数
     - ローワーキャメルケース
   * - 引数
     -
     - ローワーキャメルケース
   * - 定数
     -
     - 大文字スネークケース [1]_
   * - マクロ
     - オブジェクト形式マクロ
     - 大文字スネークケース [1]_
   * -
     - 関数形式マクロ
     - 大文字スネークケース [1]_
   * - 列挙体
     - タグ名
     - アッパーキャメルケース [1]_
   * -
     - 列挙子
     - | タグ名の後に、アンダースコア、アッパーキャメルケースの名前
       | (例 : Direction_Left, Direction_Down) [1]_
   * -
     - 列挙子(タグ名無し)
     - タグ名を省略して定数を定義するために使用する列挙体の列挙子は、大文字スネークケース
   * - 構造体
     - タグ名
     - アッパーキャメルケース [1]_ [2]_
   * -
     - メンバ名
     - | ローワーキャメルケース
       | (例 : sex, age, name)
   * - 共用体
     - タグ名
     - アッパーキャメルケース [1]_
   * -
     - メンバ名
     - | ローワーキャメルケース
       | (例 : byteLsb, byteMsb)

.. [1] ヘッダファイルによって外部に公開されるものについては、先頭に ``{モジュール名}_`` を付加すること(名前衝突回避のため)。
.. [2] プライベートメンバとしたい場合は先頭に'_'を付加することで明示する。言語使用上、アンダーバーの後が小文字アルファベットなら予約語は無い。

禁止事項
--------

* アンダースコアで始まる識別子は禁止する。(一般にコンパイラが内部で使用する予約語として使用されるため)
* ポインタ型の ``typedef`` は可読性を下げるため原則禁止とする。

省略形
------

基本的に単語は省略しない方針とするが、 文字数が多く、頻繁に使用する必要が有り、
他の単語と混同しない単語に限り、 省略形を使用可能とする。

また、多様しないグローバル変数や定数など広域で使用するものは省略形を使用しないこと。

省略形の作り方
~~~~~~~~~~~~~~

1. 単語の先頭3または4文字を使う。 (例: ``current`` → ``curr`` )
2. 上記の名称が既にある場合、あるいは不自然な場合、単語の母音を省略する方法で作成する。
   このとき先頭の母音は省略しない。また、同じ文字が続く場合は1つにする。(例: ``current`` → ``crnt``)
3. 単語の母音を省略して作成した略称が5文字以上の場合は、その先頭から3または4文字を採用する。
4. その名称が既にある場合、あるいは不自然な場合は、開発者の判断で省略形を決定する。

引用元 http://www.c-lang.org/detail/naming_conventions.html
